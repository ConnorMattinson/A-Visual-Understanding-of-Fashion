import tensorflow as tfimport tensorflow.keras.models as modelsimport tensorflow.keras.layers as layersimport osfrom time import ctimeimport numpy as npimport matplotlib.pyplot as pltfrom keras.utils.vis_utils import plot_modelfrom sklearn.metrics import precision_recall_curvefrom sklearn.metrics import average_precision_score#Datasetfrom tensorflow.keras.datasets import fashion_mnist((x_train, y_train), (x_test, y_test)) = fashion_mnist.load_data()x_train = x_train[..., tf.newaxis].astype('float32')x_test = x_test[..., tf.newaxis].astype('float32')train_ds = tf.data.Dataset.from_tensor_slices((x_train,y_train)).shuffle(10).batch(32)model = models.Sequential([    layers.Conv2D(32, (3,3), activation = 'relu', padding = 'same', input_shape = (28,28,1)),    layers.MaxPooling2D((2,2)),    layers.Conv2D(64, (3,3), activation = 'relu', padding = 'same'),    layers.Flatten(),    layers.Dense(64, activation = 'relu'),    layers.Dense(10)    ])loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)model.compile(optimizer = 'adam',              loss = loss_fn,              metrics = ['accuracy'])history = model.fit(x_train, y_train, epochs = 10)pred = np.argmax(model(x_test[16:17]))model.evaluate(x_test, y_test, verbose = 2)# Figure 35gt = [1 if i==2 else 0 for i in y_test]pred = [float(tf.nn.softmax(model(x_test[i:i+1]))[0,2]) for i in range(len(gt))]ap = average_precision_score(gt, pred)precision, recall, thresholds = precision_recall_curve(gt, pred)plt.plot(recall, precision)plt.xlabel('Recall')plt.ylabel('Precision')#plot_model(model, 'FashionMNIST_CNN.png', show_shapes = True)# Appendix 1D activation figureactivation_model = models.Model(inputs=model.input, outputs=[layer.output for layer in model.layers])columns = 1rows = 1activations = activation_model.predict(x_test[16:17])plt.imshow(x_test[16])w=100h=100fig=plt.figure(figsize = (columns,rows))for i in range(1, columns*rows +1):    fig.add_subplot(rows, columns, i)    plt.axis('off')    plt.imshow(activations[3][0,:,:,i-1])plt.show()